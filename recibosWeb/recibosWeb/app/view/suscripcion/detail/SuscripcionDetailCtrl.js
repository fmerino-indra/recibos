Ext.define('recibosWeb.view.suscripcion.detail.SuscripcionDetailCtrl', {
    extend: 'iDynamicsFront.util.ViewController',
    alias : 'controller.suscripcion-detail',

    control: {
        'suscripcion_suscripciondetailform': {
            beforesaveform: 'suscripcionOnBeforeSave',
            saveform      : 'suscripcionSave'
        }
    },

    /**
     * @autogenerated
     * Function that load the selected record's detail
     *
     * @param {Ext.selection.RowModel}
     *            modelSelected
     * @param {recibosWeb.view.direccion.Detail}
     *            detail
     */
    suscripcionViewDetail: function (modelSelected) {
        var me = this, uxfieldArray, uxfieldNArray,
            uxfield, uxfieldN, boundList, len, len2, model, datos, detail, enabled, bt;

        detail = me.getView();
        recibosWeb.model.Suscripcion.load(modelSelected.get('id'), {
            callback: function (suscripcion, operation) {
                if (suscripcion.data === null) {
                    me.error(operation.getError());
                } else {
                    model = suscripcion;
                    detail.getForm().loadRecord(model);
                    bt = me.lookupReference('enableBtn');
                    //añadimos o eliminamos la clase disabled en función del atributo enabled
                    enabled = model.get('enabled');
                    detail[(enabled ? 'remove' : 'add') + 'Cls']('disabled');
                    bt.setText(enabled ? 'Desactivar' : 'Activar');
                    enabled ? bt.setGlyph(Glyphs.getIcon('lock')) : bt.setGlyph(Glyphs.getIcon('unlock'));
                    //me.getView().setTitle(['Detalle', usuario.get('name'), usuario.get('surname')].join(' '));
                    me.getView().setTitle(t('usrusuario.detail.title'));

                    // seek simple search components and
                    // assign them to the initial value
                    uxfieldArray = Ext.ComponentQuery.query('uxdialogfield', detail);
                    len = uxfieldArray.length;
                    while (len--) {
                        uxfield = uxfieldArray[len];

                        uxfield.value = model.get(uxfield.name);
                        uxfield.setRawValue(model
                            .get(uxfield.displayFieldIni));

                    }

                    // seek multiple search components
                    // and assign them to the initial value
                    uxfieldNArray = Ext.ComponentQuery.query('uxdialogfieldn', detail);
                    len = uxfieldNArray.length;
                    while (len--) {
                        uxfieldN = uxfieldNArray[len];
                        boundList = uxfieldN.down('boundlist');

                        len2 = model.get(uxfieldN.name).length;
                        if (len2 > 0) {
                            datos = [];
                            while (len2--) {
                                datos[len2] = {};
                                datos[len2][uxfieldN.valueField] = model
                                    .get(uxfieldN.name)[len2][uxfieldN.valueField];
                                datos[len2][uxfieldN.displayField] = model
                                    .get(uxfieldN.name)[len2][uxfieldN.displayField];
                            }
                            boundList.getStore().loadData(datos);
                        }
                    }
                }
            }
        });
    },

    /**
     * @autogenerated
     * Reload all the stores needed
     *
     * @return {[Promises]}
     *
     * FMM
     * En este caso no es necesario porque el detalle no debe cargar nada y por lo tanto no tiene stores
     */
    suscripcionReloadDependentStores: function (detail) {
        var me = this, viewModel = this.getViewModel(),
            stores = ['suscripcions'], storeLoader;

        storeLoader = function (store) {
            new RSVP.Promise(function (resolve, reject) {
                resolve();
                /*
                viewModel.getStore(store).load({
                    callback: function (roles, operation, success) {
                        if (!success) {
                            if (operation.getError().code === null) {
                                me.error(operation.getError());
                            }
                            reject();
                        } else {
                            resolve(roles);
                        }
                    }
                });*/
            });
        };
        //generamos y devolvemos un array de promesas para controlar la carga de todas las dependencias
        return Ext.Array.map(stores, storeLoader);

    },

    /**
     * Here we treat the second level validations. Each error must be inserted into an array,
     * which will be passed as parameter to the method addFormActiveErrors
     * recibosWeb.view.direccion.Detail. If they are errors should return false
     * to not shoot the event and save the shipping data is interrupted.
     *
     * @param {recibosWeb.view.suscripcion.Detail}
     *            detail
     * @return {Boolean} if false abort the shipping data validations fail if second level
     */
    suscripcionOnBeforeSave: function (detail) {
        var me = this, form = detail.getForm(), params = form.getValues(), validations2 = [];
        // TODO aqu� validaciones de segundo nivel, si procede

        /*if (params['comentarios'].length > 3000) {
         validations2[validations2.length] = 'El campo Comentarios supera el tama�o m�ximo admitido: 3000';
         }*/

        if (validations2.length > 0) {
            detail.addFormActiveErrors(validations2);
            return false;
        }
    },
    onPasswordChange   : function (field, value) {
        var passwordConfirmationF = this.lookupReference('passwordConfirmation'),
            passwordF = this.lookupReference('password');
        if (passwordConfirmationF && passwordF) {
            if (passwordConfirmationF.getValue() !== passwordF.getValue()) {
                if (field.name === 'passwordConfirmation') {
                    passwordF.markInvalid('La password no son idénticas.');
                } else {
                    passwordConfirmationF.markInvalid('La password no son idénticas.');
                }
            } else {
                passwordF.clearInvalid();
                passwordConfirmationF.clearInvalid();
            }
        }
    },

    /**
     * @autogenerated
     * Saves the information entered in the registration form
     *
     * @param btn button pressed
     * @param {recibosWeb.view.suscripcion.Detail}
     *            detail
     *
     */
    suscripcionSave: function (saveBtn) {
        var me = this, detailForm = me.getView(), form = detailForm.getForm(),
            record = form.updateRecord(form.getRecord()).getRecord(),
            bounds = Ext.ComponentQuery.query('uxdialogfieldn', detailForm),
            len = bounds.length;
        while (len--) {
            bound = bounds[len];
            record.set(bound.getName(), bound.getData());
            record = form.updateRecord(form.getRecord()).getRecord();
        }

        if (form.isValid()) {
            saveBtn.setDisabled(true);
            detailForm.setLoading(true);
            if (record.phantom) {
                //creo nuevo suscripcion, no envío id
                record.setId(null);
            }
            record.save({
                success: function (r, operation) {
                    detailForm.setLoading(false);
                    saveBtn.setDisabled(false);
                    me.info(t('commons.msgs.operacionCorrecta'));
                },
                failure: function (r, operation) {
                    detailForm.setLoading(false);
                    saveBtn.setDisabled(false);
                    //me.error(operation.getError());
                }
            });
        } else {
            // TODO show warning message
        }
    },


    /**
     * @autogenerated
     * Clean form where you are editing a record
     *
     * @param btn button pressed
     *
     */
    suscripcionResetEdit: function () {
        var me = this, detailForm = me.getView(), form = detailForm.getForm(), record;
        record = form.getRecord();
        if (record.phantom) {
            form.reset();
        }
        else {
            detailForm.loadRecord(form.getRecord());
            form.clearInvalid();
        }
    }

});
