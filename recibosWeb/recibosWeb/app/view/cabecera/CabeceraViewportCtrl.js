Ext.define('recibosWeb.view.cabecera.CabeceraViewportCtrl', {
    extend  : 'Ext.app.ViewController',
    alias   : 'controller.cabecera-viewport',
    requires: [
        'recibosWeb.model.Cabecera',
        'recibosWeb.model.Emision'
    ],

    control: {
        'cabecera_cabeceragrid'                 : {
            itemdblclick   : 'cabeceraOnDataListDblClick',
            selectionchange: 'onSelectionChange'
            
//            ,
//            selectionchange: 'cabeceraOnDatalistSelectionChange'
        },
        'ux-maintoolbar button'               : {
            click: 'onAction'
        },
        'cabecera_cabeceramaster ux-maintoolbar': {
            beforerender: 'onBeforeToolbarRender'
        }
    },

    // FMM From iDynamics
    onAction: function (btn) {
        var me = this, action = btn.action;
        me.executeAction(action, btn);
    },
    // FMM From iDynamics
    executeAction: function (action) {
        var me = this;
        if (action) {
            if (typeof me[action] === 'function') {
                var args = Ext.toArray(arguments);
                me[action].apply(me, args.slice(1, args.length));
            } else {
                me.warn('Action "' + action + '" is not defined.');
            }
        } else {
            me.warn('No action defined to this event: ' + action);
        }
    },


    onBeforeToolbarRender: function (tbar) {
        var toDisable = ['deleteRecord', 'editRecord', 'resetPass'];
/*      TODO FMM
        Ext.each(toDisable, function (action) {
            tbar.down('button[action=' + action + ']').disable();
        });*/
    },

    /**
     * Load the selected record's detail, after making double click.
     *
     * @param {Ext.selection.RowModel} model
     * @param view
     */
    cabeceraOnDataListDblClick: function (view, model) {
        var me = this,
            master = me.lookupReference("cabecera_cabeceradetailmaster"),
            detail = master.down('cabecera_cabeceradetailform'),
            detailGrid = master.down('cabecera_cabeceradetailgrid'),
            detailMasterController,
            //detailController, 
            dependencies;
            //, detailFormController;
            //, detailGridController;

        detail.getForm().reset();
        me.getView().getLayout().next();

//        detailController = master.getController();
//        detailFormController = detailController;
//        dependencies = detailController.cabeceraReloadDependentStores();

        detailMasterController = master.getController();
        dependencies = detailMasterController.cabeceraReloadDependentStores();
        
        RSVP.all(dependencies).then(function () {
//            detailFormController.cabeceraViewDetail(model);
        	detailMasterController.cabeceraViewDetail(model);
        });

    },

    newRecord: function (btnNewRecord) {
        var me = this, viewport = me.getView(), layout = viewport
            .getLayout(), detail = viewport.down('cabecera_cabeceradetailform'), form = detail
            .getForm();

        if (layout.getActiveItem() === viewport.items.getAt(0)) {
            layout.setActiveItem(1);
        }
        detail.setTitle(t('cabecera.detail.title'));
        form.reset();
        form.loadRecord(Ext.create('recibosWeb.model.Cabecera'));
        form.clearInvalid();
        form.getFields().getAt(0).focus();
    },

    /**
     * @autogenerated
     * Redirect to the page selected record modified
     * load the object model
     * if not exist, launches a message indicating that
     *
     *
     * @param btn button pressed
     *
     */
    editRecord: function (btnEditRecord) {
        var me = this, rows, master;

        master = btnEditRecord.up(me.getView()).down(
            'cabecera_cabeceramaster');
        rows = master.getSelection();

        if (rows && rows.length > 0) {
            me.cabeceraOnDataListDblClick(btnEditRecord, rows[0]);
        } else {
            var wObject = {
                title   : i18n.commons.msgs.noSelectionRowTitle,
                messages: i18n.commons.msgs.noSelectionRowMsg
            };
            me.warning(wObject);
        }

    },
    /**
     * @autogenerated
     * Redirect to the previous page
     *
     *
     * @param btn button pressed
     *
     */
    back      : function () {
        var me = this;
        me.getView().down('cabecera_cabeceramaster').getController().cabeceraLoad();
        me.getView().getLayout().setActiveItem(0);
    },

    /**
     * @autogenerated
     * Delete the selected record, asking if you are sure of making the operation
     * If the answer is yes, the server invokes
     *
     * @param btn button pressed
     *
     */
    deleteRecord: function (btnDeleteRecord) {
        var me = this, viewport = me.getView(), layout = viewport
            .getLayout(), activeItem = layout.getActiveItem(), record, dataList = viewport
            .down('cabecera_cabeceragrid'), store;

        if (activeItem === viewport.items.getAt(1)) {
            record = activeItem.getUsuario();
            if (record.data.id === 0) {
                layout.prev();
                return;
            }
        } else {
            record = dataList.getSelectionModel().getSelection()[0];
        }

        store = dataList.getStore();
        me.log('Prepared to remove cabecera with id: "' + record.data.id
            + '"');
        Ext.MessageBox.confirm(t('commons.msgs.warning'),
            t('commons.msgs.question.delete'),
            function (action) {
                if (action === 'yes') {
                    me.cabeceraDeleteAction(record, function () {
                        store.remove(record);
                        if (layout.getActiveItem() === viewport.items
                                .getAt(1)) {
                            layout.setActiveItem(0);
                        }
                    });
                    store.reload();
                }
            });
    },

    /**
     * @autogenerated
     * Deletes the selected entry from the cache
     *
     * @param {Ext.data.Model}
     *            record
     * @param {Function}
     *            function to execute in the callback
     */
    cabeceraDeleteAction: function (record, fn) {
        var me = this;
        record.erase({
            success: function (record, operation) {
                if (typeof fn === 'function') {
                    fn();
                    me.info(t('commons.msgs.operacionCorrecta'));
                }
            },
            failure: function (record, operation) {
                //me.error(operation.getError());
            }
        });
    },

    getIdsFromSelection: function (getEnabled) {
        var me = this, selection, getByEnable;
        selection = me.lookupReference('cabecera_cabeceradetailmaster').down('cabecera_cabeceradetailgrid').getSelectionModel().getSelection();

        getByEnable = Ext.Array.filter(selection, function (record) {
            return record.get('devuelto') === getEnabled;
        });

        return Ext.Array.map(getEnabled !== undefined ? getByEnable : selection, function (record) {
            return record.get('id');
        });
    },

    devolver: function () {
        this.setAnular(false);
    },

    anular: function () {
        this.setAnular(true);
    },

    setAnular: function (anular) {
        var me = this, ids;
        ids = me.getIdsFromSelection(anular);
        Ext.Ajax.request({
            url    : Ext.util.Format.format('{0}/emisiones/{1}', Environment.getBaseUrl(), anular? 'anular' : 'devolver'),
            params : {id: ids},
            success: function (response) {
                var selection;
//                me.info(Ext.util.Format.format('{0} {1} {2}', desactive ? 'Desactiados' : 'Activados', ids.length, ids.length > 1 ? 'usuarios' : 'usuario'));
                // TODO Buscar controller detailMaster e invocar la carga del detalle
//                me.getView().down('cabecera_cabeceramaster').getController().usuarioLoad();
                selection = me.getView().down('cabecera_cabeceragrid').getSelectionModel().getSelection();
                me.getView().down('cabecera_cabeceradetailmaster').getController().cabeceraViewDetail(selection[0]);
            },
            failure: function (response) {
                console.log(response);
                //me.error(response);
            }
        });
    },
    //Selection control
    
    onSelectionChange: function (grid, selection) {
		this.getViewModel().set('hasAnySelected', selection.length >0);
//    	this.comprobarBotonVer();
    },

    comprobarBotonVer: function () {
    	
        var selection = this.getView().down('cabecera_cabeceragrid').getSelectionModel().getSelection();
        this.getViewModel().set('hasAnySelected', selection.length != null);
    }
});
